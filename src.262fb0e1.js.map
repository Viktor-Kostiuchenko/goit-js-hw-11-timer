{"version":3,"sources":["index.js"],"names":["refs","timerEl","document","querySelector","daysEl","hoursEl","minsEl","secsEl","CountdownTimer","constructor","selector","targetDate","onTick","intervalId","init","formatedTime","getTimeComponents","startInterval","setInterval","console","log","currentTime","Date","now","deltaTime","time","days","pad","Math","floor","hours","mins","secs","value","String","padStart","timer","updateClockFace","textContent"],"mappings":";;;AAmEA,aAnEA,QAAA,oBAEA,MAAMA,EAAO,CACXC,QAASC,SAASC,cAAc,YAChCC,OAAQF,SAASC,cAAc,uBAC/BE,QAASH,SAASC,cAAc,wBAChCG,OAAQJ,SAASC,cAAc,uBAC/BI,OAAQL,SAASC,cAAc,yBAG3B,QAACF,EAAD,OAAUG,EAAV,QAAkBC,EAAlB,OAA2BC,EAA3B,OAAmCC,GAAWP,EAEpD,MAAMQ,EACJC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,OAAwBC,IAC7BC,KAAAA,WAAa,KACbH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,OAASA,EAETE,KAAAA,OAGPA,OACQC,MAAAA,EAAe,KAAKC,kBAAkB,GACvCJ,KAAAA,OAAOG,GAGdE,gBACOP,KAAAA,SAAWQ,YAAY,KAC1BC,QAAQC,MACFC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKb,WAAaU,EAC9BI,EAAO,KAAKT,kBAAkBQ,GAC/BZ,KAAAA,OAAOa,IACb,KAGHT,kBAAkBS,GAMT,MAAA,CAAEC,KALI,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QAK1BK,MAJD,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAI9CM,KAHT,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAGlCO,KAFf,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,OAK1DE,IAAIM,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAKrC,MAAMC,EAAQ,IAAI5B,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIW,KAAK,gBACrBV,OAAQyB,IAGV,SAASA,GAAgB,KAAEX,EAAF,MAAQI,EAAR,KAAeC,EAAf,KAAqBC,IAE1C5B,EAAOkC,eAAiBZ,IACxBrB,EAAQiC,YAAcR,EACtBxB,EAAOgC,YAAcP,EACrBxB,EAAO+B,eAAiBN,IAI5BI,EAAMnB","file":"src.262fb0e1.js","sourceRoot":"../src","sourcesContent":["import './css/styles.css';\n\nconst refs = {\n  timerEl: document.querySelector('#timer-1'),\n  daysEl: document.querySelector('[data-value=\"days\"]'),\n  hoursEl: document.querySelector('[data-value=\"hours\"]'),\n  minsEl: document.querySelector('[data-value=\"mins\"]'),\n  secsEl: document.querySelector('[data-value=\"secs\"]'),\n}\n\nconst {timerEl, daysEl, hoursEl, minsEl, secsEl } = refs\n\nclass CountdownTimer {\n  constructor({ selector, targetDate, onTick }) {\n    this.intervalId = null\n    this.selector = selector\n    this.targetDate = targetDate\n    this.onTick = onTick\n    \n    this.init()\n  }\n\n  init() {\n    const formatedTime = this.getTimeComponents(0)\n    this.onTick(formatedTime)\n  }\n\n  startInterval() {\n    this.selector = setInterval(() => {\n      console.log()\n      const currentTime = Date.now()\n      const deltaTime = this.targetDate - currentTime\n      const time = this.getTimeComponents(deltaTime)\n      this.onTick(time)\n  }, 1000)\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    \n    return { days, hours, mins, secs}\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0')\n  }\n}\n\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Nov 08, 2021'),\n  onTick: updateClockFace,\n});\n\nfunction updateClockFace({ days, hours, mins, secs }) {\n  //  console.log(secs)\n    daysEl.textContent = `${days}`\n    hoursEl.textContent = hours\n    minsEl.textContent = mins\n    secsEl.textContent = `${secs}`\n   \n  }\n\ntimer.startInterval()\n\n\n"]}