{"version":3,"sources":["index.js"],"names":["refs","daysEl","document","querySelector","hoursEl","minsEl","secsEl","CountdownTimer","constructor","selector","targetDate","onTick","intervalId","startInterval","setInterval","currentTime","Date","now","deltaTime","countDown","getTimeComponents","updateClockFace","time","days","pad","Math","floor","hours","mins","secs","value","String","padStart","textContent","timer"],"mappings":";;;AAsDA,aAtDA,QAAA,oBAEA,MAAMA,EAAO,CACXC,OAAQC,SAASC,cAAc,uBAC/BC,QAASF,SAASC,cAAc,wBAChCE,OAAQH,SAASC,cAAc,uBAC/BG,OAAQJ,SAASC,cAAc,yBAG3B,OAAEF,EAAF,QAAUG,EAAV,OAAmBC,EAAnB,OAA2BC,GAAWN,EAE5C,MAAMO,EACJC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,OAAwBC,IAC7BC,KAAAA,WAAa,KACbH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAGpBG,gBACOJ,KAAAA,SAAWK,YAAY,KACpBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKR,WAAaK,EAC9BI,EAAY,KAAKC,kBAAkBF,GAEpCG,KAAAA,gBAAgBF,IACtB,KAGHC,kBAAkBE,GAMT,MAAA,CAAEC,KALI,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QAK1BK,MAJD,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAI9CM,KAHT,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAGlCO,KAFf,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,OAK1DE,IAAIM,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCX,iBAAgB,KAAEE,EAAF,MAAQI,EAAR,KAAeC,EAAf,KAAqBC,IACnC5B,EAAOgC,YAAcV,EACrBnB,EAAQ6B,YAAcN,EACtBtB,EAAO4B,YAAcL,EACrBtB,EAAO2B,YAAcJ,GAIzB,MAAMK,EAAQ,IAAI3B,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIM,KAAK,kBAGvBkB,EAAMrB","file":"src.8fa80539.js","sourceRoot":"../src","sourcesContent":["import './css/styles.css';\n\nconst refs = {\n  daysEl: document.querySelector('[data-value=\"days\"]'),\n  hoursEl: document.querySelector('[data-value=\"hours\"]'),\n  minsEl: document.querySelector('[data-value=\"mins\"]'),\n  secsEl: document.querySelector('[data-value=\"secs\"]'),\n}\n\nconst { daysEl, hoursEl, minsEl, secsEl } = refs\n\nclass CountdownTimer {\n  constructor({ selector, targetDate, onTick }) {\n    this.intervalId = null\n    this.selector = selector\n    this.targetDate = targetDate\n  }\n\n  startInterval() {\n    this.selector = setInterval(() => {\n      const currentTime = Date.now()\n      const deltaTime = this.targetDate - currentTime\n      const countDown = this.getTimeComponents(deltaTime)\n\n      this.updateClockFace(countDown)\n  }, 1000)\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    \n    return { days, hours, mins, secs}\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0')\n  }\n\n  updateClockFace({ days, hours, mins, secs }) {\n    daysEl.textContent = days\n    hoursEl.textContent = hours\n    minsEl.textContent = mins\n    secsEl.textContent = secs\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jan 16, 2022')\n});\n\ntimer.startInterval()\n\n\n"]}